package com.teraim.nils;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.text.SpannableString;
import android.text.style.UnderlineSpan;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.TableLayout.LayoutParams;

import com.google.android.gms.maps.model.LatLng;
import com.teraim.nils.DataTypes.Workflow.Unit;
import com.teraim.nils.StoredVariable.Type;
import com.teraim.nils.exceptions.EvalException;
import com.teraim.nils.exceptions.IllegalCallException;
import com.teraim.nils.exceptions.RuleException;
import com.teraim.nils.expr.Aritmetic;
import com.teraim.nils.expr.Expr;
import com.teraim.nils.expr.Literal;
import com.teraim.nils.expr.Parser;
import com.teraim.nils.expr.SyntaxException;
import com.teraim.nils.flowtemplates.DefaultTemplate;
import com.teraim.nils.flowtemplates.ListInputTemplate;


/**
 * 
 * @author Terje
 *
 * Classes defining datatypes for ruta, provyta, delyta and tåg.
 * There are two Scan() functions reading data from two input files (found under the /raw project folder).
 */
public class DataTypes  {

	static Context myC;
	static DataTypes singleton;

	public static DataTypes getSingleton() {
		return singleton;
	}

	public static void parse(Context c) {
		myC = c;
		if (singleton == null) {
			singleton = new DataTypes();

			singleton.scanRutData(c.getResources().openRawResource(R.raw.rutdata_v3));
			singleton.scanDelningsData(c.getResources().openRawResource(R.raw.delningsdata));
		}		
	}

	private ArrayList<Ruta> rutor = new ArrayList<Ruta>();




	//Workflow
	public static class Workflow {
		private List<Block> blocks;
		private String name=null;

		public enum Type
		{
			plain,
			variable_selection
		}
		public enum Unit {
			percentage,
			dm,
			undefined

		};

		public List<Block> getBlocks() {
			return blocks;
		}
		public void addBlocks(List<Block> _blocks) {
			blocks = _blocks;
		}

		public String getName() {
			if (name==null) {
				if (blocks!=null && blocks.size()>0)
					name = ((StartBlock)blocks.get(0)).getName();

			}
			return name;
		}

		public Class getWfClass() {
			Class ret = null;
			switch (getType()) {
			case plain:
				ret = DefaultTemplate.class;
				break;
			case variable_selection:
				ret = ListInputTemplate.class;
				break;

			}
			return ret;
		}

		private Type getType() {
			for (Block b:blocks) {
				if (b instanceof PageDefineBlock) {
					PageDefineBlock bl = (PageDefineBlock)b;
					final String type = bl.getPageType();
					if (type.equals("plain"))
						return Type.plain;
					else 
						if (type.equals("variable_selection"))
							return Type.variable_selection;
						else {
							Log.e("NILS","Type of page not recognized in workflow "+this.getName()+" Will default to plain");
						}
					return Type.plain;	
				}

			}
			Log.e("NILS","Could not find PageDefineBlock for workflow "+this.getName()+" Will default to plain type");
			return Type.plain;
		}

	}

	/**
	 * XML_Variable
	 * Used to describe variables defined in XML
	 */
	public  class XML_Variable {		
		public String name;
		public String label;
		Variable.Type type;
		String purpose;
		Unit unit;
	}


	/**
	 * Abstract marker interfaces for entities with different abilities used by WF
	 */

	public interface Sortable  {		
		public void sort();
	}

	public interface Filter {
		public List<Listable> filter(List<Listable> list);
	}

	public interface Filterable {		
		public void addFilter(WF_Filter f);
		public void removeFilter(WF_Filter f);
	}

	public interface Drawable {		
		public View getWidget();
	}

	public interface Listable {
		public String getSortKey();
	}

	public interface Container {	
		public Container getParent();		
		public void add(WF_Widget d);		
		public void remove(WF_Widget d);
		public Container getRoot();
		public List<WF_Widget> getWidgets();
		public void draw();

	}

	/**
	 * 
	 * Entities generated by a workflow that are one of the above.
	 *
	 */
	public abstract class WF_Thing {

		String myId;
		LinearLayout myWidget;

		public String getId() {
			return myId;
		}


	};

	public class WF_List extends WF_Widget implements Sortable,Filterable {

		List<WF_ListElement> list;
		List<WF_Filter> myFilters;
		//How about using the Container's panel??
		public WF_List(String id, List<WF_ListElement> list, Context ctx) {
			super(new LinearLayout(ctx));
			myWidget = (LinearLayout)getWidget();
			myWidget.setOrientation(LinearLayout.VERTICAL);
			myId = id;
			this.list = list;
			redraw(list);
		}


		@Override
		public void sort() {
			// TODO Auto-generated method stub			
		}

		@Override
		public void addFilter(WF_Filter f) {
			myFilters.add(f);
		}

		@Override
		public void removeFilter(WF_Filter f) {
			myFilters.remove(f);
		}

		@Override
		public String getId() {
			return myId;
		}
		
		public void redraw(List<WF_ListElement> list) {
			for (WF_ListElement l:list) {
				myWidget.addView(l.getWidget());
			}
		}


	}

	public abstract class WF_ListElement extends WF_Widget implements Listable {

		@Override
		public abstract String getSortKey(); 
		
		public WF_ListElement(View v) {
			super(v);
		}
	}

	public class WF_Widget extends WF_Thing implements Drawable {

		private View myView;

		public WF_Widget(View v) {
			myView = v;
		}
		
		
		@Override
		public View getWidget() {
			return myView;
		}


	};

	public class WF_Container extends WF_Thing implements Container {

		private ViewGroup me;
		Container parent;
		List<WF_Widget> myItems;

		public WF_Container(String id, ViewGroup container, Container parent) {
			this.myId = id;
			this.parent=parent;
			me = container;
			myItems = new ArrayList<WF_Widget>();
		}

		@Override
		public Container getParent() {
			return parent;
		}


		@Override
		public Container getRoot() {
			Container parent = this;
			Container child = null;
			while (parent!=null) {
				child = parent;
				parent = parent.getParent();			
			}
			return child;
		}

		@Override
		public void draw() {
			View v;
			for(WF_Widget d:myItems) {
				v = d.getWidget();
				if (v!=null)
					me.addView(v);
			}
		}

		@Override
		public void add(WF_Widget d) {
			// TODO Auto-generated method stub

		}

		@Override
		public void remove(WF_Widget d) {
			// TODO Auto-generated method stub

		}

		@Override
		public List<WF_Widget> getWidgets() {
			// TODO Auto-generated method stub
			return null;
		}



	}

	public abstract class WF_Filter extends WF_Thing implements Filter {


	}

	//Specialized filter. Will filter a list on Prefix.

	public class WF_AlphaNumeric_Filter extends WF_Filter {

		String myPrefix = "";

		@Override
		public List<Listable> filter(List<Listable> list) {
			String key;
			List<Listable> ret = new ArrayList<Listable>();

			for(Listable l:list) {
				key = l.getSortKey();
				if (key!=null && key.startsWith(myPrefix))
					ret.add(l);
			}
			return ret;
		}

		@Override
		public String getId() {
			// TODO Auto-generated method stub
			return null;
		}

		public WF_AlphaNumeric_Filter(String filterCh) {

			myPrefix = filterCh;
		}


	}
	public static class WF_Context {

		Context ctx;
		List<WF_List> lists;
		List<Drawable> drawables;
		List<WF_Container> containers;

		public WF_Context(Context ctx) {
			this.ctx=ctx;
		}
		public Context getContext() {
			return ctx;
		}

		//for now it is assumed that all lists implements filterable.
		public Filterable getFilterable(String id) {
			if (id==null)
				return null;
			for (WF_List wfl:lists) {
				String myId = wfl.getId();				
				if(myId!=null && myId.equals(id))
					return wfl;
			}
			return null;
		}
		public void addContainers(List<WF_Container> containers) {
			this.containers = containers; 
		}
		public Container getContainer(String id) {
			if (id==null)
				return null;
			for (WF_Container c:containers) {
				String myId =c.getId();				
				if(myId!=null && myId.equals(id))
					return c;
			}
			return null;
		}

		//draws all containers traversing the tree.
		public void drawRecursively(Container c) {
			if (c==null) {
				Log.e("nils","This container has no elements.");
				return;
			}
			c.draw();
			List<Container> cs = getChildren(c);
			for(Container child:cs)
				drawRecursively(child);

		}
		private List<Container> getChildren(Container key) {
			List<Container>ret = new ArrayList<Container>();
			if (key!=null) {
				for(Container c:containers) {
					if (c.getParent().equals(key))
						ret.add(c);
				}
			}
			return ret;
		}
	}


	public class ClickableField extends WF_ListElement {

		TextView myHeader;
		String myKey;
		protected Map<VarIdentifier,TextView> myOutputFields = new HashMap<VarIdentifier,TextView>();
		protected Map<VarIdentifier,View> myVars = new HashMap<VarIdentifier,View>();
		final LinearLayout outputContainer, inputContainer;
		Context ctx;

		public  ClickableField(final String headerT, Context ctx,String id) {
			super(LayoutInflater.from(ctx).inflate(R.layout.clickable_field_normal,null));			
			myKey = headerT;
			this.myId=id;
			this.ctx=ctx;
			
			myHeader = (TextView)getWidget().findViewById(R.id.editfieldtext);
			outputContainer = (LinearLayout)getWidget().findViewById(R.id.outputContainer);
			SpannableString content = new SpannableString(headerT);
			content.setSpan(new UnderlineSpan(), 0, content.length(), 0);
			myHeader.setText(content);
			inputContainer = new LinearLayout(ctx);
			inputContainer.setOrientation(LinearLayout.VERTICAL);
			inputContainer.setLayoutParams(new LinearLayout.LayoutParams(
					LinearLayout.LayoutParams.MATCH_PARENT, 
					LinearLayout.LayoutParams.MATCH_PARENT,
					1));


			getWidget().setClickable(true);	
			getWidget().setOnClickListener(new OnClickListener() {			
				@Override
				public void onClick(View v) {

					//On click, create dialog 			
					AlertDialog.Builder alert = new AlertDialog.Builder(v.getContext());
					alert.setTitle(headerT);
					alert.setMessage("what should this text be?");

					alert.setPositiveButton("Spara", new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int whichButton) {				  
							save();
							refreshOutPut();
							((ViewGroup)inputContainer.getParent()).removeView(inputContainer);
						}
					});
					alert.setNegativeButton("Avbryt", new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int whichButton) {
							((ViewGroup)inputContainer.getParent()).removeView(inputContainer);
						}
					});	
					Dialog d = alert.setView(inputContainer).create();
					//WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
					//lp.copyFrom(d.getWindow().getAttributes());
					//lp.height = WindowManager.LayoutParams.FILL_PARENT;
					//lp.height = 600;

					d.show();

					//d.getWindow().setAttributes(lp);
				}		
			});	
		}


		public void addVariable(String varLabel, String varId, Unit unit, Variable.Type numType, StoredVariable.Type varType, boolean displayOut) {
			// Set an EditText view to get user input 
			VarIdentifier varIdentifier = new VarIdentifier(varLabel,varId,numType,varType,unit);
			if (numType == Variable.Type.BOOLEAN) {
				View view = LayoutInflater.from(ctx).inflate(R.layout.ja_nej_radiogroup,null);
				RadioButton ja = (RadioButton)view.findViewById(R.id.ja);
				RadioButton nej = (RadioButton)view.findViewById(R.id.nej);
				String value = varIdentifier.getPrintedValue();
				if(value!=null) {
					if(value.equals("1"))
						ja.setEnabled(true);
					else
						nej.setEnabled(true);
					ja.setChecked(true);
				}
				inputContainer.addView(view);
				myVars.put(varIdentifier,view);
			}
			else {
				Log.d("nils","adding variable "+varId);
				View l = LayoutInflater.from(ctx).inflate(R.layout.edit_field,null);
				TextView header = (TextView)l.findViewById(R.id.header);
				EditText view = (EditText)l.findViewById(R.id.edit);
				header.setText(varLabel+" ("+unit.name()+")");
				view.setText(varIdentifier.getPrintedValue());
				inputContainer.addView(l);
				myVars.put(varIdentifier,view);
			}
			if (displayOut) {
				TextView o = (TextView)LayoutInflater.from(ctx).inflate(R.layout.output_field,null);
				String value = varIdentifier.getPrintedValue();
				if (!value.isEmpty()) 
					o.setText(varLabel+": "+value+" ("+varIdentifier.getPrintedUnit()+")");			
				myOutputFields.put(varIdentifier,o);
				outputContainer.addView(o);
			}

		}

		private void refreshOutPut() {
			Log.d("nils","refreshoutput called on "+myHeader);
			Iterator<Map.Entry<VarIdentifier,TextView>> it = myOutputFields.entrySet().iterator();
			while (it.hasNext()) {
				Map.Entry<VarIdentifier,TextView> pairs = (Map.Entry<VarIdentifier,TextView>)it.next();
				Log.d("nils","Iterator has found "+pairs.getKey()+" "+pairs.getValue());
				VarIdentifier varId = pairs.getKey();
				TextView out = pairs.getValue();
				String value = varId.getPrintedValue();
				if (!value.isEmpty())
					out.setText(varId.getLabel()+": "+value+" ("+varId.getPrintedUnit()+")");
				else
					out.setText("");
			}
		}

		private void save() {
			//for now only delytevariabler. 
			Iterator<Map.Entry<VarIdentifier,View>> it = myVars.entrySet().iterator();
			while (it.hasNext()) {
				Map.Entry<VarIdentifier,View> pairs = (Map.Entry<VarIdentifier,View>)it.next();
				VarIdentifier varId = pairs.getKey();
				View view = pairs.getValue();
				if (varId.numType == Variable.Type.BOOLEAN) {
					//Get the yes radiobutton.
					RadioButton rb = (RadioButton)view;
					//If checked set value to True.
					if (rb.isChecked())
						varId.setValue(rb.isChecked()?"1":"0");
				} else {
					EditText et = (EditText)view;
					varId.setValue(et.getText().toString());

					/*} else {
						TextView tv = (TextView)pairs.getValue();
						String[] tmp = tv.getText().toString().split("=");
						pairs.getKey().setValue((tmp.length>1?tmp[1]:""));

					}
					 */
				}
			}
		}


		@Override
		public String getSortKey() {
			return myKey;
		}


	}

	/**
	 * Abstract base class Block
	 * Marker class.
	 * @author Terje
	 *
	 */
	public abstract  class Block {

	}
	/*
	public abstract static class Drawable_Block extends Block {

		public abstract String getContainerId();
		public abstract void draw(Context ctx,ViewGroup container);
	}
	 */

	/**Blocks that so far implements only signal
	 * 
	 * @author Terje
	 *
	 */
	public  class AddDisplayOfSelectionsBlock extends Block {}


	public class SortingBlock extends Block {

		String containerId,type,target;
		Filterable targetList;
		WF_Filter existing = null;

		private final String[] alfabet = {
				"*","A","B","C","D","E","F",
				"G","H","I","J","K","L",
				"M","N","O","P","Q","R",
				"S","T","U","V","W","X",
				"Y","Z","Å","Ä","Ö"};

		public SortingBlock(String type,String containerId, String targetId) {
			this.type = type;
			this.containerId = containerId;
			this.target = targetId;

		}


		public Drawable createSortWidget(WF_Context ctx) {

			//Identify targetList. If no list, no game.
			targetList = ctx.getFilterable(target);
			if (targetList == null) {
				Log.e("parser","couldnt create sortwidget - could not find target");
				return null;
			}
			else {
				LinearLayout buttonPanel;
				LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT);
				buttonPanel = new LinearLayout(ctx.getContext());
				buttonPanel.setOrientation(LinearLayout.VERTICAL);
				buttonPanel.setLayoutParams(lp);

				if (type.equals("alphanumeric_sorting_function")) {
					final OnClickListener cl = new OnClickListener(){
						@Override
						public void onClick(View v) {
							String ch = ((Button)v).getText().toString();
							Log.d("Strand","User pressed "+ch);
							//This shall apply a new Alpha filter on target.
							//First, remove any existing alpha filter.
							targetList.removeFilter(existing);
							existing = new WF_AlphaNumeric_Filter(ch);
							targetList.addFilter(existing);
							//how to trigger redraw?
						}
					};
					Button b;
					for (String c:alfabet) {
						b = new Button(ctx.getContext());
						b.setLayoutParams(lp);
						b.setText(c);
						b.setOnClickListener(cl);
						buttonPanel.addView(b);
					}
				} else {
					Log.e("parser","Sorry, unknown filtering type");
					return null;
				}	
				return new WF_Widget(buttonPanel);
			}

		}

		public void draw(Context ctx, ViewGroup container) {

		}
	}

	public  class FilterBlock extends Block {

	}
	/**
	 * Startblock.
	 * @author Terje
	 *
	 */
	public  class StartBlock extends Block {
		final private String workflowName;
		final private String[] args;

		public StartBlock(String[] args,String wfn) {
			workflowName = wfn;
			this.args = args;
		}

		public String getName() {
			return workflowName;
		}

		public String[] getArgs() {
			return args;
		}
	}

	/**
	 * buttonblock
	 * 
	 * name is ID for now..
	 * 
	 * @author Terje
	 *
	 */
	public  class ButtonBlock extends Block {
		String text,action,name,containerId;

		public ButtonBlock(String lbl,String action, String name,String container) {
			Log.d("NILS","ButtonText is set to "+text);
			this.text = lbl;
			this.action=action;
			this.name=name;
			this.containerId = container;
		}

		public String getText() {
			return text;
		}

		public Action getAction() {
			return new Action(action);
		}

		public String getName() {
			return name;
		}

		public class Action {
			public final static int VALIDATE = -1;
			public final static int WF_EXECUTE = -2;

			private int type;
			public String wfName=null;
			public Action(String t) {
				if (t.equals("validate"))
					type = VALIDATE;
				else
					type = WF_EXECUTE;
				wfName = t;
				Log.e("NILS","Workflowname in ACTION is "+t+" with length "+t.length());
			}
			public boolean isWorkflow() {
				return type==WF_EXECUTE;
			}
		}

		public void draw(final Context ctx, ViewGroup container) {
			Button button = new Button(ctx);
			button.setBackgroundDrawable(ctx.getResources().getDrawable(R.drawable.button_bg_selector));
			button.setTextAppearance(ctx, R.style.WF_Text);
			button.setText(getText());

			LayoutParams params = new LayoutParams();
			params.width = LayoutParams.WRAP_CONTENT;
			params.height = LayoutParams.MATCH_PARENT;
			params.leftMargin = 100;
			params.rightMargin = 100;
			//Not sure about these..
			params.bottomMargin = 10;
			params.topMargin = 10;
			button.setLayoutParams(params);

			button.setOnClickListener(new View.OnClickListener() {
				@Override
				public void onClick(View arg0) {
					Action action = getAction();
					//ACtion = workflow to execute.
					//Commence!

					if (action!=null) {
						//Workflow?
						if (action.isWorkflow()){

							Workflow wf = CommonVars.cv().getWorkflow(action.wfName);
							if (wf == null) {
								Log.e("NILS","Cannot find wf referenced by button "+getName()+
										"Workflow not found is named "+wf.getName());
							} else {

								Intent intent = new Intent(ctx,wf.getWfClass());
								Bundle b = new Bundle();
								b.putString("workflow_name", action.wfName); //Your id
								intent.putExtras(b); //Put your id to your next Intent
								//save all changes

								ctx.startActivity(intent);
								//Validation?
							}
						} //else
						//validate();
					} else
						Log.e("NILS","Action was null for "+getName());
				}

			});
			container.addView(button);
		}
	}

	/**
	 * CreateFieldBlock.
	 * @author Terje
	 *
	 */
	public  class CreateFieldBlock extends Block {
		//Create a fieldblock.
		//SIDEEFFECT: Creates Variable if not already created.
		XML_Variable mXvar;

		public CreateFieldBlock(XML_Variable Xvar) throws EvalException {
			mXvar = Xvar;
			Variable var = CommonVars.cv().getVariable(Xvar.name);
			//IS this a new variable? 
			if (var==null) {
				//Integer is created as a Aritmetic.
				if (Xvar.type==null||
						Xvar.type==Variable.Type.NUMERIC)
					CommonVars.cv().makeNumeric(Xvar.name,Xvar.label);
				else if (Xvar.type==Variable.Type.ARITMETIC)
					CommonVars.cv().makeAritmetic(Xvar.name,Xvar.label);
				else if (Xvar.type==Variable.Type.LITERAL)
					CommonVars.cv().makeLiteral(Xvar.name,Xvar.label);
				else if (Xvar.type==Variable.Type.BOOLEAN)
					CommonVars.cv().makeBoolean(Xvar.name,Xvar.label);

				Log.d("NILS", "Var created with name "+Xvar.name);
			} else {
				if (!Xvar.type.equals(var.getType()))
					throw new EvalException("Variable "+var.getName()+" has inconsistent type in CreateField blocks");
			}
		}
		public boolean isEditable() {
			return mXvar.equals("edit");
		}

		public String getVariableReference() {
			return mXvar.name;
		}

		public Variable.Type getType() {
			return mXvar.type;
		}

	}

	public  class CreateListEntriesBlock extends Block {
		String fileName=null;
		String containerId;
		String id;

		public String getFileName() {
			return fileName;
		}
		public String getContainerId() {
			return containerId;
		}
		public CreateListEntriesBlock(String fileName, String containerId, String id) {
			this.fileName =fileName;
			this.containerId = containerId;
			this.id=id;
		}

		public void createListFromFile(WF_Context ctx) {
			Log.d("NILS","Scanning createlistentries with filename "+this.getFileName());
			InputStream is;
			List <VarToListConfigRow>rows=null;

			Container myContainer = ctx.getContainer(containerId);
			if (myContainer !=null) {

				List<WF_ListElement> lista = new  ArrayList<WF_ListElement>();

				try {
					is = new FileInputStream(CommonVars.CONFIG_FILES_DIR+this.getFileName());
					rows = scanListConfigData(is);
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (rows!=null) {
					Log.d("nils","Config file had "+rows.size()+" entries");
					int index = 0;
					ClickableField listRow=null;
					for(VarToListConfigRow r:rows) {
						if (r==null) {
							Log.e("nils","found null value in config file row "+index);
						} else {
							if (r.getAction().equals("create")) {
								listRow = new ClickableField(r.getEntryLabel(),ctx.getContext(),"C_F_"+index);
								lista.add(listRow);	
							} 
							if (!r.getAction().equals("add")&&!r.getAction().equals("create"))
								Log.e("nils","something is wrong...action is neither Create or Add: "+r.getAction());
							else {
								Log.d("nils","add...");
								if (listRow!=null) {
									Log.d("nils","var added "+r.getVarLabel());
									listRow.addVariable(r.getVarLabel(), r.getVarName(), r.getUnit(), r.getnumType(),r.getVarType(), r.isDisplayInList());
								}
							}
						}
						index++;
					}
					
					//Should this be List<WF_Thing> ??
					myContainer.add(new WF_List(id, lista,ctx.getContext()));
				}
				else
					Log.d("nils","failed to scan input file");
			} else
				Log.e("nils","failed to parse listEntriesblock - could not find the container");
		}

	}


	/**
	 * CreateListEntryBlock.
	 * @author Terje
	 *
	 */
	public  class CreateListEntryBlock extends Block {
		//Create a fieldblock.
		//SIDEEFFECT: Creates Variable if not already created.
		ArrayList<XML_Variable> mXvars;
		String myName;

		public CreateListEntryBlock(ArrayList<XML_Variable> Xvars, String name) throws EvalException {
			mXvars = Xvars;
			myName = name;
			for (XML_Variable Xvar:Xvars) {
				Variable var = CommonVars.cv().getVariable(Xvar.name);
				//IS this a new variable? 
				if (var==null) {
					//Integer is created as a Aritmetic.
					if (Xvar.type==null||
							Xvar.type==Variable.Type.NUMERIC)
						CommonVars.cv().makeNumeric(Xvar.name,Xvar.label);
					else if (Xvar.type==Variable.Type.ARITMETIC)
						CommonVars.cv().makeAritmetic(Xvar.name,Xvar.label);
					else if (Xvar.type==Variable.Type.LITERAL)
						CommonVars.cv().makeLiteral(Xvar.name,Xvar.label);
					else if (Xvar.type==Variable.Type.BOOLEAN)
						CommonVars.cv().makeBoolean(Xvar.name,Xvar.label);

					Log.d("NILS", "Var created with name "+Xvar.name);
				} else {
					if (!Xvar.type.equals(var.getType()))
						throw new EvalException("Variable "+var.getName()+" has inconsistent type in CreateField blocks");
				}
			}
		}

		public String getName() {
			return myName;
		}
		public ArrayList<XML_Variable> getVariables() {
			return mXvars;
		}
	}



	/**
	 * setvalueblock.
	 * @author Terje
	 *
	 */
	public  class SetValueBlock extends Block {
		private String varRef;
		private String expr;

		//Save references.
		public SetValueBlock(String lbl,String _varReference,String _expr) {
			varRef = _varReference;
			expr = _expr;
		}

		//Assign value of Expr to Variable.
		public void run() throws EvalException, SyntaxException {
			//Var Ref must refer to an existing variable.		
			Variable var = CommonVars.cv().getVariable(varRef);
			if (var==null)
				throw new EvalException("Variable does not exist");
			//Should expression be evaluated?
			if (var.getType()==Variable.Type.ARITMETIC||
					var.getType()==Variable.Type.NUMERIC) {
				double val =-1;
				val = Parser.parse(expr).value();
				((Aritmetic)var).setValue(val);
				Log.d("NILS","Expr: "+expr+" evaluated to: "+val);
			} else {
				((Literal)var).setValue(expr);

			}
		}



	}

	/**
	 * Layoutblock
	 * @author Terje
	 *
	 */
	public  class LayoutBlock extends Block {

		private String layoutDirection="", alignment="";

		public String getLayoutDirection() {
			return layoutDirection;
		}
		public String getAlignment() {
			return alignment;
		}
		public LayoutBlock(String lbl, String layoutDirection, String alignment) {
			this.layoutDirection = layoutDirection;
			this.alignment = alignment;
		}
	}

	/**
	 * Page Definition block
	 * @author Terje
	 *
	 */
	public  class PageDefineBlock extends Block {

		private String pageName="",pageType=null,pageLabel="";

		public String getPageName() {
			return pageName;
		}
		public String getPageType() {
			return pageType;
		}
		public String getPageLabel() {
			return pageLabel;
		}
		public PageDefineBlock(String pageName,String pageType,String pageLabel) {
			this.pageName =pageName;
			this.pageType = pageType;
			this.pageLabel=pageLabel;
		}
	}

	/**
	 * Container Definition block
	 * @author Terje
	 *
	 */
	public  class ContainerDefineBlock extends Block {

		private String containerName="",containerType=null;

		public String getContainerName() {
			return containerName;
		}
		public String getContainerType() {
			return containerType;
		}

		public ContainerDefineBlock(String containerName, String containerType) {
			this.containerName =containerName;
			this.containerType = containerType;
		}
	}
	/**
	 * AddRuleBlock
	 * @author Terje
	 *
	 */
	public  class Rule {

		public String targetName, condition, action, errorMsg,name;

		public Rule(String ruleName, String target, String condition,
				String action, String errorMsg) {
			this.name=ruleName;
			this.targetName=target;
			this.condition=condition;
			this.action=action;
			this.errorMsg=errorMsg;
			Log.e("NILS","Create Rule with name "+ruleName+" and target "+target+" and cond "+ condition);

		}
		public Variable getTarget() throws RuleException {
			Variable var = CommonVars.cv().getVariable(targetName);
			if (var==null)
				throw new RuleException("Variable "+targetName+" must exist");

			return var;
		}	
		//Execute Rule. Target will be colored accordingly.
		public boolean execute() throws SyntaxException {
			Expr result=null;
			result = Parser.parse(condition);
			Log.d("NILS","Result of eval was: "+result.value());
			return (result.value()==1.0);
		}

		public String getErrorMessage() {
			return errorMsg;
		}
		public String getName() {
			return name;
		}	
	}

	public  class AddRuleBlock extends Block {

		private Rule r;

		public AddRuleBlock(String lbl, String ruleName,String target, String condition, String action, String errorMsg) {
			this.r = new Rule(ruleName,target,condition,action,errorMsg);

		}

		public Rule getRule() {
			return r;
		}


	}

	///ValuePair

	public class ValuePair {
		public String mkey,mval;
		public ValuePair(String key, String val) {
			mkey=key;
			mval=val;
		}
	}


	//Train class stores the "TÅG" in swedish, i.e. the dividing lines crossing the Provyta (TestArea).
	//Train defined by points in a circle. Each point is described as an angle (rikt) and a distance (dist).
	//There can be up to 8 points per Train but there must be an equal number of Avst/Rikt, so
	//setAvst and setRikt needs be called equal number of times. 


	public class Train  {
		static final int Max_Points = 10;
		final int[] avst;
		final int[] rikt;
		private int current;


		boolean nick;
		boolean carter;

		public Train() {
			nick = carter = false;
			avst=new int[Max_Points];
			rikt=new int[Max_Points];
			current=0;
		}
		public void setAvst(int avs) throws IllegalCallException {
			if(!nick) {
				avst[current]=avs;
				nick = true;
				checkIfNext();
			} else
				throw new IllegalCallException();

		}
		public void setRikt(int rik) throws IllegalCallException {
			if(!carter) {
				rikt[current]=rik;
				carter = true;
				checkIfNext();
			} else
				throw new IllegalCallException();

		}
		private void checkIfNext() {
			if (nick&carter) {
				current++;
				nick = carter = false;
			}
		}

		public int getSize() {
			return current;
		}

		public int[][] getTag() {
			if (current==0)
				return null;
			int ret[][]= new int[current][2];
			for(int i=0;i<current;i++) {
				ret[i][0]=avst[i];
				ret[i][1]=rikt[i];
			}
			return ret;
		}
	}
	public class Delyta extends ParameterCache {
		final int Max_Points = 10;
		private Train tr=null; 
		private final String myId;
		private Provyta myParent;

		public Delyta(String id, Provyta parent, String[] raw) {
			myId = id;
			myParent = parent;
			setPoints(raw);
		}

		public int[][] getPoints() {
			if(tr!=null)
				return tr.getTag();
			else
				return null;
		}
		public String getId() {
			return myId;
		}

		public boolean setPoints(String[] tag) {
			int val = -1;
			boolean avst = true;

			//Put -999 to signal null value.
			if (tag!=null) {
				tr = new Train();
				for (String s:tag) {

					try {
						val = Integer.parseInt(s);
					} catch(NumberFormatException e) {
						//If error, break! 
						if (!s.equals("NA"))
							Log.e("NILS", "Not a number in delytedata: "+s);
						return false;
					}
					if (val<0) {
						return false;
					}

					//If avst is true, the AVSTÅND will be set and the arraypointer moved forward.
					if (avst) {

						avst = false;
						try {
							tr.setAvst(val);
						} catch (IllegalCallException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
							return false;
						}
					} else {
						try {
							tr.setRikt(val);
						} catch (IllegalCallException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
							return false;
						}
						avst = true;
					}

				}
			}
			return true;
		}

		public StoredVariable getVariable(String varId) {
			if (myParent == null) {
				Log.e("nils","Getvariable called on delyta without parent..?");
				return null;
			} else
				return getDelyteVariable(this.myParent.getParent().getId(),this.myParent.getId(),this.myId,varId);
		}

		@Override
		public StoredVariable storeVariable(String varId, String value) {
			return this.storeVariable(new StoredVariable(myParent.getParent().getId(), myParent.getId(), this.getId(),
					value, 	varId,
					Type.delyta));		
		}


	}

	public class Provyta extends ParameterCache {

		private String id;
		double N=0;
		double E=0;
		double lat=0;
		double longh=0;

		private ArrayList<Delyta>dy = new ArrayList<Delyta>();

		private Ruta myParent;

		public Provyta(String id, Ruta parent) {
			this.id = id;
			myParent = parent;
		}

		public String getId() {
			return id;
		}

		public Ruta getParent() {
			return myParent;
		}

		public double[] getLatLong() {
			double[] ret = new double[2];
			ret[0]=lat;
			ret[1]=longh;
			return ret;
		}
		public void setSweRef(double n, double e) {
			N = n;
			E = e;
		}
		public void setGPS(double lat, double longh) {
			this.lat = lat;
			this.longh = longh;
		}

		//ADD will add the delyta if new. Otherwise it will update the current value.
		public void addDelyta(String delyteId, String[] raw) {

			dy.add(new Delyta(delyteId,this,raw));
		}

		public Delyta findDelyta(String delyteId) {
			for(Delyta d:dy)
				if(d.getId().equals(delyteId))
					return d;
			return null;
		}

		public ArrayList<Delyta>getDelytor() {
			return dy;
		}

		public void updateDelyta(int index, String[] tag) {
			Delyta d = dy.get(index);
			d.setPoints(tag);
		}

		@Override
		public StoredVariable getVariable(String varId) {
			if (myParent == null) {
				Log.e("nils","Getvariable called on provyta without parent..?");
				return null;
			} else
				return getProvyteVariable(myParent.getId(),id,varId);
		}

		@Override
		public StoredVariable storeVariable(String varId, String value) {
			return this.storeVariable(new StoredVariable(myParent.getId(), this.getId(), null,
					value, 	varId,
					Type.provyta));

		}
	}



	public class Ruta extends ParameterCache {
		private String myId;

		private ArrayList<Provyta> provytor = new ArrayList<Provyta>();

		public Ruta(String id) {
			myId = id;
		}

		public String getId() {
			return myId;
		}

		private void addDelYta(String provYteId,String delyteId,String[] raw) {

			if (provYteId != null) {
				Provyta _py = findProvYta(provYteId);
				if (_py==null) {
					Log.e("NILS","Provyta with id "+provYteId+" not  found in rutdata but found in delningsdata");
					//_py = new ProvYta(provYteId);
					//py.add(_py);

				} else
					_py.addDelyta(delyteId, raw);
			}
		}

		public Provyta addProvYta_rutdata(String ytId, String north, String east, String lat, String longh) {
			Provyta yta = new Provyta(ytId,this);
			try {

				yta.setSweRef(Double.parseDouble(north),Double.parseDouble(east));
				Log.d("NILS","Adding Yta ID:  N E:"+ytId+" "+ Double.parseDouble(north)+" "+Double.parseDouble(east));
				yta.setGPS(Double.parseDouble(lat),Double.parseDouble(longh));
			} catch (NumberFormatException e) {
				Log.d("NILS","The center coordinates for yta "+ytId+" are not recognized as proper doubles");
				return null;
			}
			provytor.add(yta);
			//Add default 0 delyta.
			yta.addDelyta("0", null);
			return yta;
		}
		public ArrayList<Provyta> getAllProvYtor() {
			return provytor;
		}

		public Sorted sort() {
			Sorted s = new Sorted();
			return s;
		}

		public LatLng[] getCorners() {
			//North south
			double[] lat = new double[provytor.size()];
			//East west
			double[] lon = new double[provytor.size()];
			int i = 0;

			for(Provyta y:provytor) {
				lat[i]= y.lat;
				lon[i]= y.longh;
				Log.d("NILS","SN: "+y.N+" SE: "+y.E);
				i++;
			}
			Arrays.sort(lat);
			Arrays.sort(lon);
			LatLng[] ret = new LatLng[2];
			//sw
			ret[0] = new LatLng(lat[0],lon[0]);
			//ne
			ret[1]= new LatLng(lat[lat.length-1],  lon[lon.length-1]);
			return ret;
		}

		public class Sorted {
			double[] N = new double[provytor.size()];
			double[] E = new double[provytor.size()];
			public Sorted() {
				int i = 0;
				for(Provyta y:provytor) {
					N[i]= y.N;
					E[i]= y.E;
					Log.d("NILS","SN: "+y.N+" SE: "+y.E);
					i++;
				}
				Arrays.sort(N);
				Arrays.sort(E);
			}
			//return minx,miny,maxx,maxy
			public double getMax_N_sweref_99() {
				return N[N.length-1];
			}
			public double getMax_E_sweref_99() {
				return E[E.length-1];
			}
			public double getMin_N_sweref_99() {
				return N[0];
			}
			public double getMin_E_sweref_99() {
				return E[0];
			}
		}



		public Provyta findProvYta(String ytId) {
			for(Provyta y:provytor) {
				if(y.getId().equals(ytId)) {
					return y;
				}

			}
			Log.d("nils","Couldn't find provyta with ID "+ytId);
			return null;
		}

		@Override
		public StoredVariable getVariable(String varId) {
			if (myId == null) {
				Log.e("nils","My ID was null in getVariable Ruta for variable: "+varId);
				return null;
			} else

				return getRutVariable(myId, varId);
		}

		@Override
		public StoredVariable storeVariable(String varId, String value) {
			return this.storeVariable(new StoredVariable(this.getId(), null, null,
					value, 	varId,
					Type.ruta));

		}


	}

	public Ruta findRuta(String id) {
		//Log.d("nils","Findruta called with ID> "+id);
		if (id == null) {
			return null;
		}
		for (Ruta r:rutor) 
			if (r.getId().equals(id))
				return r;
		return null;
	}

	public String[] getRutIds() {
		if (rutor != null) {
			String[] contents = new String[rutor.size()];		
			int i=0;
			for (Ruta r:rutor)
				contents[i++]=r.getId();
			return contents;
		}
		return null;
	}

	public ArrayList<Delyta> getDelytor(String rutId, String provyteId) {
		Ruta r = findRuta(rutId);
		if (r!=null) {
			Log.d("NILS","found ruta "+ rutId);
			Provyta p = r.findProvYta(provyteId);
			if (p!=null) {
				Log.d("NILS","Found provyta"+ provyteId);			
				return (p.getDelytor());
			} else {
				Log.e("NILS","DID NOT FIND Provyta for id "+provyteId);
				//TODO: Files must contains same provytor!
				//Fix for now: Generate default if missing.
				//p.addDelyta("1", null);
				//r.addProvYta(provyteId, "1", null);
				//return getDelytor(rutId,provyteId);
			}
		} else
			Log.e("NILS","DID NOT FIND RUTA "+ rutId);
		return null;
	}
	//scan csv file for Rutor. Create if needed.
	private void scanRutData(InputStream csvFile) {
		InputStreamReader is = new InputStreamReader(csvFile);
		BufferedReader br = new BufferedReader(is);
		String header;
		try {
			String row;
			header = br.readLine();
			Log.d("nils",header);
			//Find all RutIDs from csv. Create Ruta Class for each.
			while((row = br.readLine())!=null) {
				String  r[] = row.split(",");
				if (r!=null&&r.length>3) {
					Log.d("NILS",r[0]);
					Ruta ruta=findRuta(r[0]);
					if (ruta ==null) {
						ruta = new Ruta(r[0]);
						rutor.add(ruta);
					}
					int id = Integer.parseInt(r[1]);
					//Skip IDs belonging to inner ytor.
					if (id>12&&id<17)
						continue;
					if (ruta.addProvYta_rutdata(r[1],r[2],r[3],r[7],r[8])!=null)
						Log.d("NILS","added provyta with ID "+r[1]);
					else
						Log.d("NILS","discarded provyta with ID "+r[1]);

				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		//Calculate the distance between smallest and biggest x,y values
		//This is done to be able to calculate the grid position.
		Log.d("NILS","checking minmax...");
		for (Ruta r:rutor) {
			Ruta.Sorted s = r.sort();
			Log.d("NILS","Ruta with id "+r.getId()+" has minxy: "+s.getMin_E_sweref_99()+" "+s.getMin_N_sweref_99()+
					" and maxXy: "+s.getMax_E_sweref_99()+" "+s.getMax_N_sweref_99());
		}
	}

	//scan csv file for Rutor. Create if needed.
	private void scanDelningsData(InputStream csvFile) {
		InputStreamReader is = new InputStreamReader(csvFile);
		BufferedReader br = new BufferedReader(is);
		final int noPo = 16;
		try {
			String row;
			String header = br.readLine();
			Log.d("NILS",header);
			//Find rutId etc
			while((row = br.readLine())!=null) {
				String  r[] = row.split("\t");
				if (r!=null) {	
					if (r[2]==null)
						continue;
					Ruta ruta = findRuta(r[2]);
					//if this is a new ruta, add it to the array
					if (ruta!=null) {
						//Extract the delningståg out from the data.
						String[] points = new String[noPo];
						System.arraycopy(r, 6, points, 0, noPo);
						ruta.addDelYta(r[4],r[5],points);
					}
					//TODO: Add this as ELSE when the files match. 
					//Currently only Rutor from Rutdata will matter.
					/* ruta = new Ruta(r[2]);
						rutor.add(ruta);
					 */

				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}



	public ArrayList <VarToListConfigRow> scanListConfigData(InputStream csvFile) {
		ArrayList <VarToListConfigRow> varList = new ArrayList <VarToListConfigRow> (); 

		InputStreamReader is = new InputStreamReader(csvFile);       
		BufferedReader br = new BufferedReader(is);
		String header;
		try {
			String row;
			header = br.readLine();
			Log.d("NILS","Scanning listdatafile with header "+header);
			//Find all RutIDs from csv. Create Ruta Class for each.
			while((row = br.readLine())!=null) {
				String[]  r = row.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)");
				VarToListConfigRow p;
				if (r!=null) {
					p=VarToListConfigRow.createRow(r);
					Log.d("NILS",r[0]);
					if (p!=null)
						varList.add(p);
					else
						Log.e("nils","one row in config file corrupt");
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return varList;
	}


}




